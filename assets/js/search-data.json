{
  
    
        "post0": {
            "title": "End-to-end Driving using Comma AI dataset",
            "content": "Part 1: End-to-end Driving using Comma AI dataset . This is the first post in the series of posts on the topic of end-to-end model for autonomous driving. Future posts: . Part 2: Using PilotNet model in real car on Estonian gravel roads | Part 3: Using Vision Transformers with Comma AI dataset | . Introduction . End-to-End driving is predicting output command directly from input sensor, in this case predicting steering command from camera image. . . Imitation learning | . Data . Comma AI dataset [6] is used to train the model. This dataset has over 33 hours of commute on California’s highway. I divided dataset into 95% training, 5% validation and 5% test set. . Video resolution is 1164x874. When extracting frames for training, image is downscaled to the resolution of 258x194 for faster training process. From this downscaled image, smaller region of interest is cropped as most of the image does not in include information useful for training, like trees and sky. . . Comma AI dataset contains a small sample of very difficult situations like crossroads, which are impossible to predict correctly using just camera images as model has no clear information whether to turn left or right. Most of these cases have high steering angle and make it very hard for model to converge (especially with using MSE loss). To avoid manually going through hours of videos, all frames with steering angle bigger than 20 degrees are removed from dataset. (TODO: include exact counts of frames removed) . Model . Convolutional neural network have been most succesful architectures in computer vision and it is natural choice for lane following. NVIDIA used CNN architecture in their DAVE-2 system called PilotNet [1]. . . I used Batch normalisation instead of first static normalisation layer as I found it made training more stable, model trained quicker and had less variability in epochs validation losses. Also Leaky ReLU is used as activation function for layers. . Training . Big effort was needed to speed up training speed as training on video files is very slow, this is magnified with the need to access frames randomly during training. I tried to speed up the processing by using NVIDIA DALI [5], but reading video frames was still bottleneck and not GPU. The best performance was achieved by extracting all frame from video files into JPG files with reduced resolution using ffmpeg utility and training model using these. When training using extracted images, one epoch (around 30 hours of driving) takes around 30 minutes, instead of several hours when using video based solutions. . Model is trained until validation loss fails to improve for 10 epochs. Mean absolute error (MAE) is used as the loss function as it proved to work better compared to mean square error (MSE) loss as it does not magnify errors with big steering angles. . Data balancing . Driving data is very unbalanced, most driving is done straight or with very small steering angle. This can be seen also in Comma AI dataset: . . This presents problem for training neural network as it will be biased to predict small degrees and under-predict bigger steering angles. I tested with two balanced datasets . | | . Results . Training loss improved mostly during first 5 iteration for every data balancing variation as this dataset is quite big and has similar driving data. . . Similarly validation loss drops quickly and only has minor improvement afterwards. Unbalanced dataset achieves the lowest validation loss already on 7th epoch and fat-tailed balanced dataset on 11th epoch. Unbalanced and fat-tails data distributions seem to train better and achieve lower validation loss compared to uniformly balanced dataset. . . Model trained with fat-tailed distribution got the lowest test loss of 1.107, followed by model with unbalance data 1.157. Model trained with uniform distribution got the highest test loss of 1.223, which is probably caused by changing initial distribution too much and causing model to overestimate small steering angles. . Oversampling data to fat-tailed distribution seems to be promising and training model with even fatter tails could improve results even further. Losses were measured using only one training run and to get more valid comparison, several runs should be made to see the variability in results. . . Model performance during the day (green is true steering angle and red is predicted steering angle): . . During the night: . . Visualisation of network state . Grad-CAM paper [2] introduces technique for producing “visual explanations” for decisions from a large class of CNN-based models. It is technique for visualising importance of image feature to the final output of the network. There is great pytorch implementation of these gradient based methods. . As this technique is for classification problem and predicting steering angle is regression problem, I modified the implementation to work with regression problem by using ideas from Jacob Gildenblat blog [4]. Target steering angles are divided into 3 ranges, turning strong to the left (big positive steering angles), turning strongly the right (big negative steering angles) and driving straight (small steering angles).This makes it classification problem again. When steering angle are big, image features contributing most to big steering angles are peaked. When steering angle is small, image features contributing mostly to small steering angle by taking inverse of steering angle as our target. . def grad_cam_loss(self, x, angle): if angle &gt; 2.0: return x elif angle &lt; -2.0: return -x else: return torch.reciprocal(x.cpu()) * np.sign(angle.cpu()) . By resulting activation maps for each convolutional layer are following: . . First layer seems to provide the best information. Model seems to be mostly concentrating on road markings, ground under other cars and sides of the road: . Conclusions . Most effort will go preparing data pipeline and making it fast enough, not tuning model itself. Simple convolutional neural network like PilotNet is quite good at learning simple lane following using camera images. Gradient based visualisations can provide insights into how model works and what parts of input image are important for the model. . There are several improvements that can be done to the model: . Use more complex model (Resnet, Vision Transformers) | Use PilotNet with bigger input image size | Do data augmentation for concurring with the distribution shift problem | . References . [1] End to End Learning for Self-Driving Cars https://arxiv.org/abs/1604.07316 . [2] Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization https://arxiv.org/abs/1610.02391 . [3] Class Activation Map methods implemented in Pytorch https://github.com/jacobgil/pytorch-grad-cam . [4] Visualizations for regressing wheel steering angles in self driving cars, Jacob Gildenblat https://jacobgil.github.io/deeplearning/vehicle-steering-angle-visualizations . [5] NVIDIA Data Loading Library https://docs.nvidia.com/deeplearning/dali/user-guide/docs . [6] CommaAI 2k19 dataset https://github.com/commaai/comma2k19 .",
            "url": "https://rometaidla.github.io/ai-blog/markdown/2020/06/14/lane-following.html",
            "relUrl": "/markdown/2020/06/14/lane-following.html",
            "date": " • Jun 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rometaidla.github.io/ai-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rometaidla.github.io/ai-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rometaidla.github.io/ai-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rometaidla.github.io/ai-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}